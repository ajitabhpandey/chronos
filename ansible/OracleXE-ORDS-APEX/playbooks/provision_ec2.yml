---
- name: Provision new EC2 Instance
###################################
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    project_name: xe-ords-apex
    env: DEV
    key_name: "key_{{ project_name }}"
    instance_type: "t2.micro"
    aws_access_key: "YOUR_AWS_ACCESS_KEY_HERE"
    aws_secret_key: "YOUR_AWS_SECRET_KEY_HERE"
    aws_security_group: "sg_{{ project_name }}"
    aws_vpc_subnet_id: ""
    aws_ami_owner: "679593333241"
    aws_ami_name: "CentOS Linux 7 x86_64 HVM EBS 1602-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-d7e1d2bd.3"
    aws_region: ap-south-1
  tasks:
    - name: "Determine AMI to be used"
      ec2_ami_find:
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        owner: "{{ aws_ami_owner }}"
        name: "{{ aws_ami_name }}"
        sort: name
        sort_order: descending
        sort_end: 1
      register: ami_find

    - name: "Create SSH Key Pair"
      ec2_key:
        name: "{{ key_name }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        key_material: "{{ item }}"
        wait: yes
        wait_timeout: 300
      with_file: ~/.ssh/id_rsa.pub

    - name: "Opening ports in AWS Security Group"
      ec2_group:
        name: "{{ aws_security_group }}"
        description: "Security Group for {{ project_name }} - {{ env }} environment"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          # SSH
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          # HTTP
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          # Oracle port
          - proto: tcp
            from_port: 1521
            to_port: 1521
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            from_port: 1
            to_port: 65535
            cidr_ip: 0.0.0.0/0

    - name: "Create EC2 instance"
      ec2:
        key_name: "{{ key_name }}"
        group: "{{ aws_security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami_find.results[0].ami_id }}"
        region: "{{ aws_region }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 8
            delete_on_termination: true
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_subnet_id: "{{ aws_vpc_subnet_id | default(omit) }}"
        assign_public_ip: "{{ aws_vpc_subnet_id is defined and aws_vpc_subnet_id != '' }}"
        instance_tags:
          Name: "{{ env }}"
          Project: "{{ project_name }}"
        wait: true
      register: ec2

    - name: "Dynamically add launched instance to in-memory inventory group"
      add_host: name="{{ item.public_ip }}" groups=ec2-dynamic-group
      with_items: "{{ ec2.instances }}"

    - name: "Wait for SSH to come up"
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        search_regex: "OpenSSH"
      with_items:
        - "{{ ec2.instances }}"

    - name: A brief pause to ensure OpenSSH has started accepting connections.
      pause:
          seconds: 120

- name: "Configuring EC2 Instance"
##################################
  hosts: ec2-dynamic-group
  vars:
      ansible_ssh_private_key_file: ~/.ssh/id_rsa
  remote_user: centos
  become: True
  gather_facts: True
  pre_tasks:
    - name: Set SELinux to Permissive if found enabled
      command: setenforce Permissive
      when: ansible_selinux.mode == "enforcing"

    - name: Set SELinux to Permissive in config file if found Enforcing
      lineinfile:
        dest: /etc/selinux/config
        regexp: '(\s*)SELINUX=enforcing$'
        line: '\1SELINUX=permissive'
        backrefs: yes
      when: ansible_selinux.config_mode == "enforcing"

    - name: Install some additional packages
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - unzip

    - name: Fix the LC_CTYPE errors
      lineinfile:
        dest: /etc/environment
        line: "{{ item }}"
        state: present
      with_items:
        - "LC_ALL=en_US.utf-8"
        - "LANG=en_US.utf-8"

  roles:
    - apache
    - jdk
    - tomcat
    - oracle-xe
    - ords
    - apex-install
    - apex-patch
